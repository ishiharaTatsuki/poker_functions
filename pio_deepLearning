import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.metrics import accuracy_score, r2_score, mean_squared_error
import keras
from keras.layers.recurrent import LSTM
from keras import regularizers
from keras.models import Sequential, Model
from keras.layers import Dense, Dropout, BatchNormalization, Conv2D, Flatten, Layer, Input, Dot, MaxPooling2D, Add, Multiply, concatenate
from keras.optimizers import Adam
from keras.callbacks import EarlyStopping
from keras.models import load_model
import pickle
import time
import category_encoders as ce

position = {"OOP" : 0, "IP" : 1}
# [0]:check, [1]:call, [2]:bet, [3]:3bet(raise), [4]:4bet, [5]:5bet , [9]:first_action(oop時のアクション)
villain_action = {"check" : 0, "call":1, "bet":2, "3bet":3, "4bet":4, "5bet":5, "first_action":9}

RANK_NUM = {'A':14, 'K':13, 'Q':12, 'J':11, 'T':10, '9':9, '8':8, '7':7, '6':6, '5':5,
            '4':4, '3':3, '2':2}
SUIT_NUM = {'s':0, 'h':1, 'd':2, 'c':3}
pio_card ={ '2d2c': 0, '2h2c': 0, '2h2d': 0, '2s2c': 0, '2s2d': 0, '2s2h': 0, '3c2c': 0, '3c2d': 0, '3c2h': 0, '3c2s': 0, '3d2c': 0, '3d2d': 0, '3d2h': 0, '3d2s': 0, '3d3c': 0, '3h2c': 0, '3h2d': 0, '3h2h': 0, '3h2s': 0, '3h3c': 0, '3h3d': 0, '3s2c': 0, '3s2d': 0, '3s2h': 0, '3s2s': 0, '3s3c': 0, '3s3d': 0, '3s3h': 0, '4c2c': 0, '4c2d': 0, '4c2h': 0, '4c2s': 0, '4c3c': 0, '4c3d': 0, '4c3h': 0, '4c3s': 0, '4d2c': 0, '4d2d': 0, '4d2h': 0, '4d2s': 0, '4d3c': 0, '4d3d': 0, '4d3h': 0, '4d3s': 0, '4d4c': 0, '4h2c': 0, '4h2d': 0, '4h2h': 0, '4h2s': 0, '4h3c': 0, '4h3d': 0, '4h3h': 0, '4h3s': 0, '4h4c': 0, '4h4d': 0, '4s2c': 0, '4s2d': 0, '4s2h': 0, '4s2s': 0, '4s3c': 0, '4s3d': 0, '4s3h': 0, '4s3s': 0, '4s4c': 0, '4s4d': 0, '4s4h': 0, '5c2c': 0, '5c2d': 0, '5c2h': 0, '5c2s': 0, '5c3c': 0, '5c3d': 0, '5c3h': 0, '5c3s': 0, '5c4c': 0, '5c4d': 0, '5c4h': 0, '5c4s': 0, '5d2c': 0, '5d2d': 0, '5d2h': 0, '5d2s': 0, '5d3c': 0, '5d3d': 0, '5d3h': 0, '5d3s': 0, '5d4c': 0, '5d4d': 0, '5d4h': 0, '5d4s': 0, '5d5c': 0, '5h2c': 0, '5h2d': 0, '5h2h': 0, '5h2s': 0, '5h3c': 0, '5h3d': 0, '5h3h': 0, '5h3s': 0, '5h4c': 0, '5h4d': 0, '5h4h': 0, '5h4s': 0, '5h5c': 0, '5h5d': 0, '5s2c': 0, '5s2d': 0, '5s2h': 0, '5s2s': 0, '5s3c': 0, '5s3d': 0, '5s3h': 0, '5s3s': 0, '5s4c': 0, '5s4d': 0, '5s4h': 0, '5s4s': 0, '5s5c': 0, '5s5d': 0, '5s5h': 0, '6c2c': 0, '6c2d': 0, '6c2h': 0, '6c2s': 0, '6c3c': 0, '6c3d': 0, '6c3h': 0, '6c3s': 0, '6c4c': 0, '6c4d': 0, '6c4h': 0, '6c4s': 0, '6c5c': 0, '6c5d': 0, '6c5h': 0, '6c5s': 0, '6d2c': 0, '6d2d': 0, '6d2h': 0, '6d2s': 0, '6d3c': 0, '6d3d': 0, '6d3h': 0, '6d3s': 0, '6d4c': 0, '6d4d': 0, '6d4h': 0, '6d4s': 0, '6d5c': 0, '6d5d': 0, '6d5h': 0, '6d5s': 0, '6d6c': 0, '6h2c': 0, '6h2d': 0, '6h2h': 0, '6h2s': 0, '6h3c': 0, '6h3d': 0, '6h3h': 0, '6h3s': 0, '6h4c': 0, '6h4d': 0, '6h4h': 0, '6h4s': 0, '6h5c': 0, '6h5d': 0, '6h5h': 0, '6h5s': 0, '6h6c': 0, '6h6d': 0, '6s2c': 0, '6s2d': 0, '6s2h': 0, '6s2s': 0, '6s3c': 0, '6s3d': 0, '6s3h': 0, '6s3s': 0, '6s4c': 0, '6s4d': 0, '6s4h': 0, '6s4s': 0, '6s5c': 0, '6s5d': 0, '6s5h': 0, '6s5s': 0, '6s6c': 0, '6s6d': 0, '6s6h': 0, '7c2c': 0, '7c2d': 0, '7c2h': 0, '7c2s': 0, '7c3c': 0, '7c3d': 0, '7c3h': 0, '7c3s': 0, '7c4c': 0, '7c4d': 0, '7c4h': 0, '7c4s': 0, '7c5c': 0, '7c5d': 0, '7c5h': 0, '7c5s': 0, '7c6c': 0, '7c6d': 0, '7c6h': 0, '7c6s': 0, '7d2c': 0, '7d2d': 0, '7d2h': 0, '7d2s': 0, '7d3c': 0, '7d3d': 0, '7d3h': 0, '7d3s': 0, '7d4c': 0, '7d4d': 0, '7d4h': 0, '7d4s': 0, '7d5c': 0, '7d5d': 0, '7d5h': 0, '7d5s': 0, '7d6c': 0, '7d6d': 0, '7d6h': 0, '7d6s': 0, '7d7c': 0, '7h2c': 0, '7h2d': 0, '7h2h': 0, '7h2s': 0, '7h3c': 0, '7h3d': 0, '7h3h': 0, '7h3s': 0, '7h4c': 0, '7h4d': 0, '7h4h': 0, '7h4s': 0, '7h5c': 0, '7h5d': 0, '7h5h': 0, '7h5s': 0, '7h6c': 0, '7h6d': 0, '7h6h': 0, '7h6s': 0, '7h7c': 0, '7h7d': 0, '7s2c': 0, '7s2d': 0, '7s2h': 0, '7s2s': 0, '7s3c': 0, '7s3d': 0, '7s3h': 0, '7s3s': 0, '7s4c': 0, '7s4d': 0, '7s4h': 0, '7s4s': 0, '7s5c': 0, '7s5d': 0, '7s5h': 0, '7s5s': 0, '7s6c': 0, '7s6d': 0, '7s6h': 0, '7s6s': 0, '7s7c': 0, '7s7d': 0, '7s7h': 0, '8c2c': 0, '8c2d': 0, '8c2h': 0, '8c2s': 0, '8c3c': 0, '8c3d': 0, '8c3h': 0, '8c3s': 0, '8c4c': 0, '8c4d': 0, '8c4h': 0, '8c4s': 0, '8c5c': 0, '8c5d': 0, '8c5h': 0, '8c5s': 0, '8c6c': 0, '8c6d': 0, '8c6h': 0, '8c6s': 0, '8c7c': 0, '8c7d': 0, '8c7h': 0, '8c7s': 0, '8d2c': 0, '8d2d': 0, '8d2h': 0, '8d2s': 0, '8d3c': 0, '8d3d': 0, '8d3h': 0, '8d3s': 0, '8d4c': 0, '8d4d': 0, '8d4h': 0, '8d4s': 0, '8d5c': 0, '8d5d': 0, '8d5h': 0, '8d5s': 0, '8d6c': 0, '8d6d': 0, '8d6h': 0, '8d6s': 0, '8d7c': 0, '8d7d': 0, '8d7h': 0, '8d7s': 0, '8d8c': 0, '8h2c': 0, '8h2d': 0, '8h2h': 0, '8h2s': 0, '8h3c': 0, '8h3d': 0, '8h3h': 0, '8h3s': 0, '8h4c': 0, '8h4d': 0, '8h4h': 0, '8h4s': 0, '8h5c': 0, '8h5d': 0, '8h5h': 0, '8h5s': 0, '8h6c': 0, '8h6d': 0, '8h6h': 0, '8h6s': 0, '8h7c': 0, '8h7d': 0, '8h7h': 0, '8h7s': 0, '8h8c': 0, '8h8d': 0, '8s2c': 0, '8s2d': 0, '8s2h': 0, '8s2s': 0, '8s3c': 0, '8s3d': 0, '8s3h': 0, '8s3s': 0, '8s4c': 0, '8s4d': 0, '8s4h': 0, '8s4s': 0, '8s5c': 0, '8s5d': 0, '8s5h': 0, '8s5s': 0, '8s6c': 0, '8s6d': 0, '8s6h': 0, '8s6s': 0, '8s7c': 0, '8s7d': 0, '8s7h': 0, '8s7s': 0, '8s8c': 0, '8s8d': 0, '8s8h': 0, '9c2c': 0, '9c2d': 0, '9c2h': 0, '9c2s': 0, '9c3c': 0, '9c3d': 0, '9c3h': 0, '9c3s': 0, '9c4c': 0, '9c4d': 0, '9c4h': 0, '9c4s': 0, '9c5c': 0, '9c5d': 0, '9c5h': 0, '9c5s': 0, '9c6c': 0, '9c6d': 0, '9c6h': 0, '9c6s': 0, '9c7c': 0, '9c7d': 0, '9c7h': 0, '9c7s': 0, '9c8c': 0, '9c8d': 0, '9c8h': 0, '9c8s': 0, '9d2c': 0, '9d2d': 0, '9d2h': 0, '9d2s': 0, '9d3c': 0, '9d3d': 0, '9d3h': 0, '9d3s': 0, '9d4c': 0, '9d4d': 0, '9d4h': 0, '9d4s': 0, '9d5c': 0, '9d5d': 0, '9d5h': 0, '9d5s': 0, '9d6c': 0, '9d6d': 0, '9d6h': 0, '9d6s': 0, '9d7c': 0, '9d7d': 0, '9d7h': 0, '9d7s': 0, '9d8c': 0, '9d8d': 0, '9d8h': 0, '9d8s': 0, '9d9c': 0, '9h2c': 0, '9h2d': 0, '9h2h': 0, '9h2s': 0, '9h3c': 0, '9h3d': 0, '9h3h': 0, '9h3s': 0, '9h4c': 0, '9h4d': 0, '9h4h': 0, '9h4s': 0, '9h5c': 0, '9h5d': 0, '9h5h': 0, '9h5s': 0, '9h6c': 0, '9h6d': 0, '9h6h': 0, '9h6s': 0, '9h7c': 0, '9h7d': 0, '9h7h': 0, '9h7s': 0, '9h8c': 0, '9h8d': 0, '9h8h': 0, '9h8s': 0, '9h9c': 0, '9h9d': 0, '9s2c': 0, '9s2d': 0, '9s2h': 0, '9s2s': 0, '9s3c': 0, '9s3d': 0, '9s3h': 0, '9s3s': 0, '9s4c': 0, '9s4d': 0, '9s4h': 0, '9s4s': 0, '9s5c': 0, '9s5d': 0, '9s5h': 0, '9s5s': 0, '9s6c': 0, '9s6d': 0, '9s6h': 0, '9s6s': 0, '9s7c': 0, '9s7d': 0, '9s7h': 0, '9s7s': 0, '9s8c': 0, '9s8d': 0, '9s8h': 0, '9s8s': 0, '9s9c': 0, '9s9d': 0, '9s9h': 0, 'Tc2c': 0, 'Tc2d': 0, 'Tc2h': 0, 'Tc2s': 0, 'Tc3c': 0, 'Tc3d': 0, 'Tc3h': 0, 'Tc3s': 0, 'Tc4c': 0, 'Tc4d': 0, 'Tc4h': 0, 'Tc4s': 0, 'Tc5c': 0, 'Tc5d': 0, 'Tc5h': 0, 'Tc5s': 0, 'Tc6c': 0, 'Tc6d': 0, 'Tc6h': 0, 'Tc6s': 0, 'Tc7c': 0, 'Tc7d': 0, 'Tc7h': 0, 'Tc7s': 0, 'Tc8c': 0, 'Tc8d': 0, 'Tc8h': 0, 'Tc8s': 0, 'Tc9c': 0, 'Tc9d': 0, 'Tc9h': 0, 'Tc9s': 0, 'Td2c': 0, 'Td2d': 0, 'Td2h': 0, 'Td2s': 0, 'Td3c': 0, 'Td3d': 0, 'Td3h': 0, 'Td3s': 0, 'Td4c': 0, 'Td4d': 0, 'Td4h': 0, 'Td4s': 0, 'Td5c': 0, 'Td5d': 0, 'Td5h': 0, 'Td5s': 0, 'Td6c': 0, 'Td6d': 0, 'Td6h': 0, 'Td6s': 0, 'Td7c': 0, 'Td7d': 0, 'Td7h': 0, 'Td7s': 0, 'Td8c': 0, 'Td8d': 0, 'Td8h': 0, 'Td8s': 0, 'Td9c': 0, 'Td9d': 0, 'Td9h': 0, 'Td9s': 0, 'TdTc': 0, 'Th2c': 0, 'Th2d': 0, 'Th2h': 0, 'Th2s': 0, 'Th3c': 0, 'Th3d': 0, 'Th3h': 0, 'Th3s': 0, 'Th4c': 0, 'Th4d': 0, 'Th4h': 0, 'Th4s': 0, 'Th5c': 0, 'Th5d': 0, 'Th5h': 0, 'Th5s': 0, 'Th6c': 0, 'Th6d': 0, 'Th6h': 0, 'Th6s': 0, 'Th7c': 0, 'Th7d': 0, 'Th7h': 0, 'Th7s': 0, 'Th8c': 0, 'Th8d': 0, 'Th8h': 0, 'Th8s': 0, 'Th9c': 0, 'Th9d': 0, 'Th9h': 0, 'Th9s': 0, 'ThTc': 0, 'ThTd': 0, 'Ts2c': 0, 'Ts2d': 0, 'Ts2h': 0, 'Ts2s': 0, 'Ts3c': 0, 'Ts3d': 0, 'Ts3h': 0, 'Ts3s': 0, 'Ts4c': 0, 'Ts4d': 0, 'Ts4h': 0, 'Ts4s': 0, 'Ts5c': 0, 'Ts5d': 0, 'Ts5h': 0, 'Ts5s': 0, 'Ts6c': 0, 'Ts6d': 0, 'Ts6h': 0, 'Ts6s': 0, 'Ts7c': 0, 'Ts7d': 0, 'Ts7h': 0, 'Ts7s': 0, 'Ts8c': 0, 'Ts8d': 0, 'Ts8h': 0, 'Ts8s': 0, 'Ts9c': 0, 'Ts9d': 0, 'Ts9h': 0, 'Ts9s': 0, 'TsTc': 0, 'TsTd': 0, 'TsTh': 0, 'Jc2c': 0, 'Jc2d': 0, 'Jc2h': 0, 'Jc2s': 0, 'Jc3c': 0, 'Jc3d': 0, 'Jc3h': 0, 'Jc3s': 0, 'Jc4c': 0, 'Jc4d': 0, 'Jc4h': 0, 'Jc4s': 0, 'Jc5c': 0, 'Jc5d': 0, 'Jc5h': 0, 'Jc5s': 0, 'Jc6c': 0, 'Jc6d': 0, 'Jc6h': 0, 'Jc6s': 0, 'Jc7c': 0, 'Jc7d': 0, 'Jc7h': 0, 'Jc7s': 0, 'Jc8c': 0, 'Jc8d': 0, 'Jc8h': 0, 'Jc8s': 0, 'Jc9c': 0, 'Jc9d': 0, 'Jc9h': 0, 'Jc9s': 0, 'JcTc': 0, 'JcTd': 0, 'JcTh': 0, 'JcTs': 0, 'Jd2c': 0, 'Jd2d': 0, 'Jd2h': 0, 'Jd2s': 0, 'Jd3c': 0, 'Jd3d': 0, 'Jd3h': 0, 'Jd3s': 0, 'Jd4c': 0, 'Jd4d': 0, 'Jd4h': 0, 'Jd4s': 0, 'Jd5c': 0, 'Jd5d': 0, 'Jd5h': 0, 'Jd5s': 0, 'Jd6c': 0, 'Jd6d': 0, 'Jd6h': 0, 'Jd6s': 0, 'Jd7c': 0, 'Jd7d': 0, 'Jd7h': 0, 'Jd7s': 0, 'Jd8c': 0, 'Jd8d': 0, 'Jd8h': 0, 'Jd8s': 0, 'Jd9c': 0, 'Jd9d': 0, 'Jd9h': 0, 'Jd9s': 0, 'JdTc': 0, 'JdTd': 0, 'JdTh': 0, 'JdTs': 0, 'JdJc': 0, 'Jh2c': 0, 'Jh2d': 0, 'Jh2h': 0, 'Jh2s': 0, 'Jh3c': 0, 'Jh3d': 0, 'Jh3h': 0, 'Jh3s': 0, 'Jh4c': 0, 'Jh4d': 0, 'Jh4h': 0, 'Jh4s': 0, 'Jh5c': 0, 'Jh5d': 0, 'Jh5h': 0, 'Jh5s': 0, 'Jh6c': 0, 'Jh6d': 0, 'Jh6h': 0, 'Jh6s': 0, 'Jh7c': 0, 'Jh7d': 0, 'Jh7h': 0, 'Jh7s': 0, 'Jh8c': 0, 'Jh8d': 0, 'Jh8h': 0, 'Jh8s': 0, 'Jh9c': 0, 'Jh9d': 0, 'Jh9h': 0, 'Jh9s': 0, 'JhTc': 0, 'JhTd': 0, 'JhTh': 0, 'JhTs': 0, 'JhJc': 0, 'JhJd': 0, 'Js2c': 0, 'Js2d': 0, 'Js2h': 0, 'Js2s': 0, 'Js3c': 0, 'Js3d': 0, 'Js3h': 0, 'Js3s': 0, 'Js4c': 0, 'Js4d': 0, 'Js4h': 0, 'Js4s': 0, 'Js5c': 0, 'Js5d': 0, 'Js5h': 0, 'Js5s': 0, 'Js6c': 0, 'Js6d': 0, 'Js6h': 0, 'Js6s': 0, 'Js7c': 0, 'Js7d': 0, 'Js7h': 0, 'Js7s': 0, 'Js8c': 0, 'Js8d': 0, 'Js8h': 0, 'Js8s': 0, 'Js9c': 0, 'Js9d': 0, 'Js9h': 0, 'Js9s': 0, 'JsTc': 0, 'JsTd': 0, 'JsTh': 0, 'JsTs': 0, 'JsJc': 0, 'JsJd': 0, 'JsJh': 0, 'Qc2c': 0, 'Qc2d': 0, 'Qc2h': 0, 'Qc2s': 0, 'Qc3c': 0, 'Qc3d': 0, 'Qc3h': 0, 'Qc3s': 0, 'Qc4c': 0, 'Qc4d': 0, 'Qc4h': 0, 'Qc4s': 0, 'Qc5c': 0, 'Qc5d': 0, 'Qc5h': 0, 'Qc5s': 0, 'Qc6c': 0, 'Qc6d': 0, 'Qc6h': 0, 'Qc6s': 0, 'Qc7c': 0, 'Qc7d': 0, 'Qc7h': 0, 'Qc7s': 0, 'Qc8c': 0, 'Qc8d': 0, 'Qc8h': 0, 'Qc8s': 0, 'Qc9c': 0, 'Qc9d': 0, 'Qc9h': 0, 'Qc9s': 0, 'QcTc': 0, 'QcTd': 0, 'QcTh': 0, 'QcTs': 0, 'QcJc': 0, 'QcJd': 0, 'QcJh': 0, 'QcJs': 0, 'Qd2c': 0, 'Qd2d': 0, 'Qd2h': 0, 'Qd2s': 0, 'Qd3c': 0, 'Qd3d': 0, 'Qd3h': 0, 'Qd3s': 0, 'Qd4c': 0, 'Qd4d': 0, 'Qd4h': 0, 'Qd4s': 0, 'Qd5c': 0, 'Qd5d': 0, 'Qd5h': 0, 'Qd5s': 0, 'Qd6c': 0, 'Qd6d': 0, 'Qd6h': 0, 'Qd6s': 0, 'Qd7c': 0, 'Qd7d': 0, 'Qd7h': 0, 'Qd7s': 0, 'Qd8c': 0, 'Qd8d': 0, 'Qd8h': 0, 'Qd8s': 0, 'Qd9c': 0, 'Qd9d': 0, 'Qd9h': 0, 'Qd9s': 0, 'QdTc': 0, 'QdTd': 0, 'QdTh': 0, 'QdTs': 0, 'QdJc': 0, 'QdJd': 0, 'QdJh': 0, 'QdJs': 0, 'QdQc': 0, 'Qh2c': 0, 'Qh2d': 0, 'Qh2h': 0, 'Qh2s': 0, 'Qh3c': 0, 'Qh3d': 0, 'Qh3h': 0, 'Qh3s': 0, 'Qh4c': 0, 'Qh4d': 0, 'Qh4h': 0, 'Qh4s': 0, 'Qh5c': 0, 'Qh5d': 0, 'Qh5h': 0, 'Qh5s': 0, 'Qh6c': 0, 'Qh6d': 0, 'Qh6h': 0, 'Qh6s': 0, 'Qh7c': 0, 'Qh7d': 0, 'Qh7h': 0, 'Qh7s': 0, 'Qh8c': 0, 'Qh8d': 0, 'Qh8h': 0, 'Qh8s': 0, 'Qh9c': 0, 'Qh9d': 0, 'Qh9h': 0, 'Qh9s': 0, 'QhTc': 0, 'QhTd': 0, 'QhTh': 0, 'QhTs': 0, 'QhJc': 0, 'QhJd': 0, 'QhJh': 0, 'QhJs': 0, 'QhQc': 0, 'QhQd': 0, 'Qs2c': 0, 'Qs2d': 0, 'Qs2h': 0, 'Qs2s': 0, 'Qs3c': 0, 'Qs3d': 0, 'Qs3h': 0, 'Qs3s': 0, 'Qs4c': 0, 'Qs4d': 0, 'Qs4h': 0, 'Qs4s': 0, 'Qs5c': 0, 'Qs5d': 0, 'Qs5h': 0, 'Qs5s': 0, 'Qs6c': 0, 'Qs6d': 0, 'Qs6h': 0, 'Qs6s': 0, 'Qs7c': 0, 'Qs7d': 0, 'Qs7h': 0, 'Qs7s': 0, 'Qs8c': 0, 'Qs8d': 0, 'Qs8h': 0, 'Qs8s': 0, 'Qs9c': 0, 'Qs9d': 0, 'Qs9h': 0, 'Qs9s': 0, 'QsTc': 0, 'QsTd': 0, 'QsTh': 0, 'QsTs': 0, 'QsJc': 0, 'QsJd': 0, 'QsJh': 0, 'QsJs': 0, 'QsQc': 0, 'QsQd': 0, 'QsQh': 0, 'Kc2c': 0, 'Kc2d': 0, 'Kc2h': 0, 'Kc2s': 0, 'Kc3c': 0, 'Kc3d': 0, 'Kc3h': 0, 'Kc3s': 0, 'Kc4c': 0, 'Kc4d': 0, 'Kc4h': 0, 'Kc4s': 0, 'Kc5c': 0, 'Kc5d': 0, 'Kc5h': 0, 'Kc5s': 0, 'Kc6c': 0, 'Kc6d': 0, 'Kc6h': 0, 'Kc6s': 0, 'Kc7c': 0, 'Kc7d': 0, 'Kc7h': 0, 'Kc7s': 0, 'Kc8c': 0, 'Kc8d': 0, 'Kc8h': 0, 'Kc8s': 0, 'Kc9c': 0, 'Kc9d': 0, 'Kc9h': 0, 'Kc9s': 0, 'KcTc': 0, 'KcTd': 0, 'KcTh': 0, 'KcTs': 0, 'KcJc': 0, 'KcJd': 0, 'KcJh': 0, 'KcJs': 0, 'KcQc': 0, 'KcQd': 0, 'KcQh': 0, 'KcQs': 0, 'Kd2c': 0, 'Kd2d': 0, 'Kd2h': 0, 'Kd2s': 0, 'Kd3c': 0, 'Kd3d': 0, 'Kd3h': 0, 'Kd3s': 0, 'Kd4c': 0, 'Kd4d': 0, 'Kd4h': 0, 'Kd4s': 0, 'Kd5c': 0, 'Kd5d': 0, 'Kd5h': 0, 'Kd5s': 0, 'Kd6c': 0, 'Kd6d': 0, 'Kd6h': 0, 'Kd6s': 0, 'Kd7c': 0, 'Kd7d': 0, 'Kd7h': 0, 'Kd7s': 0, 'Kd8c': 0, 'Kd8d': 0, 'Kd8h': 0, 'Kd8s': 0, 'Kd9c': 0, 'Kd9d': 0, 'Kd9h': 0, 'Kd9s': 0, 'KdTc': 0, 'KdTd': 0, 'KdTh': 0, 'KdTs': 0, 'KdJc': 0, 'KdJd': 0, 'KdJh': 0, 'KdJs': 0, 'KdQc': 0, 'KdQd': 0, 'KdQh': 0, 'KdQs': 0, 'KdKc': 0, 'Kh2c': 0, 'Kh2d': 0, 'Kh2h': 0, 'Kh2s': 0, 'Kh3c': 0, 'Kh3d': 0, 'Kh3h': 0, 'Kh3s': 0, 'Kh4c': 0, 'Kh4d': 0, 'Kh4h': 0, 'Kh4s': 0, 'Kh5c': 0, 'Kh5d': 0, 'Kh5h': 0, 'Kh5s': 0, 'Kh6c': 0, 'Kh6d': 0, 'Kh6h': 0, 'Kh6s': 0, 'Kh7c': 0, 'Kh7d': 0, 'Kh7h': 0, 'Kh7s': 0, 'Kh8c': 0, 'Kh8d': 0, 'Kh8h': 0, 'Kh8s': 0, 'Kh9c': 0, 'Kh9d': 0, 'Kh9h': 0, 'Kh9s': 0, 'KhTc': 0, 'KhTd': 0, 'KhTh': 0, 'KhTs': 0, 'KhJc': 0, 'KhJd': 0, 'KhJh': 0, 'KhJs': 0, 'KhQc': 0, 'KhQd': 0, 'KhQh': 0, 'KhQs': 0, 'KhKc': 0, 'KhKd': 0, 'Ks2c': 0, 'Ks2d': 0, 'Ks2h': 0, 'Ks2s': 0, 'Ks3c': 0, 'Ks3d': 0, 'Ks3h': 0, 'Ks3s': 0, 'Ks4c': 0, 'Ks4d': 0, 'Ks4h': 0, 'Ks4s': 0, 'Ks5c': 0, 'Ks5d': 0, 'Ks5h': 0, 'Ks5s': 0, 'Ks6c': 0, 'Ks6d': 0, 'Ks6h': 0, 'Ks6s': 0, 'Ks7c': 0, 'Ks7d': 0, 'Ks7h': 0, 'Ks7s': 0, 'Ks8c': 0, 'Ks8d': 0, 'Ks8h': 0, 'Ks8s': 0, 'Ks9c': 0, 'Ks9d': 0, 'Ks9h': 0, 'Ks9s': 0, 'KsTc': 0, 'KsTd': 0, 'KsTh': 0, 'KsTs': 0, 'KsJc': 0, 'KsJd': 0, 'KsJh': 0, 'KsJs': 0, 'KsQc': 0, 'KsQd': 0, 'KsQh': 0, 'KsQs': 0, 'KsKc': 0, 'KsKd': 0, 'KsKh': 0, 'Ac2c': 0, 'Ac2d': 0, 'Ac2h': 0, 'Ac2s': 0, 'Ac3c': 0, 'Ac3d': 0, 'Ac3h': 0, 'Ac3s': 0, 'Ac4c': 0, 'Ac4d': 0, 'Ac4h': 0, 'Ac4s': 0, 'Ac5c': 0, 'Ac5d': 0, 'Ac5h': 0, 'Ac5s': 0, 'Ac6c': 0, 'Ac6d': 0, 'Ac6h': 0, 'Ac6s': 0, 'Ac7c': 0, 'Ac7d': 0, 'Ac7h': 0, 'Ac7s': 0, 'Ac8c': 0, 'Ac8d': 0, 'Ac8h': 0, 'Ac8s': 0, 'Ac9c': 0, 'Ac9d': 0, 'Ac9h': 0, 'Ac9s': 0, 'AcTc': 0, 'AcTd': 0, 'AcTh': 0, 'AcTs': 0, 'AcJc': 0, 'AcJd': 0, 'AcJh': 0, 'AcJs': 0, 'AcQc': 0, 'AcQd': 0, 'AcQh': 0, 'AcQs': 0, 'AcKc': 0, 'AcKd': 0, 'AcKh': 0, 'AcKs': 0, 'Ad2c': 0, 'Ad2d': 0, 'Ad2h': 0, 'Ad2s': 0, 'Ad3c': 0, 'Ad3d': 0, 'Ad3h': 0, 'Ad3s': 0, 'Ad4c': 0, 'Ad4d': 0, 'Ad4h': 0, 'Ad4s': 0, 'Ad5c': 0, 'Ad5d': 0, 'Ad5h': 0, 'Ad5s': 0, 'Ad6c': 0, 'Ad6d': 0, 'Ad6h': 0, 'Ad6s': 0, 'Ad7c': 0, 'Ad7d': 0, 'Ad7h': 0, 'Ad7s': 0, 'Ad8c': 0, 'Ad8d': 0, 'Ad8h': 0, 'Ad8s': 0, 'Ad9c': 0, 'Ad9d': 0, 'Ad9h': 0, 'Ad9s': 0, 'AdTc': 0, 'AdTd': 0, 'AdTh': 0, 'AdTs': 0, 'AdJc': 0, 'AdJd': 0, 'AdJh': 0, 'AdJs': 0, 'AdQc': 0, 'AdQd': 0, 'AdQh': 0, 'AdQs': 0, 'AdKc': 0, 'AdKd': 0, 'AdKh': 0, 'AdKs': 0, 'AdAc': 0, 'Ah2c': 0, 'Ah2d': 0, 'Ah2h': 0, 'Ah2s': 0, 'Ah3c': 0, 'Ah3d': 0, 'Ah3h': 0, 'Ah3s': 0, 'Ah4c': 0, 'Ah4d': 0, 'Ah4h': 0, 'Ah4s': 0, 'Ah5c': 0, 'Ah5d': 0, 'Ah5h': 0, 'Ah5s': 0, 'Ah6c': 0, 'Ah6d': 0, 'Ah6h': 0, 'Ah6s': 0, 'Ah7c': 0, 'Ah7d': 0, 'Ah7h': 0, 'Ah7s': 0, 'Ah8c': 0, 'Ah8d': 0, 'Ah8h': 0, 'Ah8s': 0, 'Ah9c': 0, 'Ah9d': 0, 'Ah9h': 0, 'Ah9s': 0, 'AhTc': 0, 'AhTd': 0, 'AhTh': 0, 'AhTs': 0, 'AhJc': 0, 'AhJd': 0, 'AhJh': 0, 'AhJs': 0, 'AhQc': 0, 'AhQd': 0, 'AhQh': 0, 'AhQs': 0, 'AhKc': 0, 'AhKd': 0, 'AhKh': 0, 'AhKs': 0, 'AhAc': 0, 'AhAd': 0, 'As2c': 0, 'As2d': 0, 'As2h': 0, 'As2s': 0, 'As3c': 0, 'As3d': 0, 'As3h': 0, 'As3s': 0, 'As4c': 0, 'As4d': 0, 'As4h': 0, 'As4s': 0, 'As5c': 0, 'As5d': 0, 'As5h': 0, 'As5s': 0, 'As6c': 0, 'As6d': 0, 'As6h': 0, 'As6s': 0, 'As7c': 0, 'As7d': 0, 'As7h': 0, 'As7s': 0, 'As8c': 0, 'As8d': 0, 'As8h': 0, 'As8s': 0, 'As9c': 0, 'As9d': 0, 'As9h': 0, 'As9s': 0, 'AsTc': 0, 'AsTd': 0, 'AsTh': 0, 'AsTs': 0, 'AsJc': 0, 'AsJd': 0, 'AsJh': 0, 'AsJs': 0, 'AsQc': 0, 'AsQd': 0, 'AsQh': 0, 'AsQs': 0, 'AsKc': 0, 'AsKd': 0, 'AsKh': 0, 'AsKs': 0, 'AsAc': 0, 'AsAd': 0, 'AsAh': 0}


def comb_make_colum(df="", column_name="", join_str=""):
    make_df = pd.DataFrame(
        np.array(
            list(df[column_name].apply(lambda x: x.split() if len(str(x))==1326 else [0]*1326))
        ).astype(float),
        columns=pio_card.keys())
    if join_str:
        make_df.rename(columns=lambda c: join_str + c, inplace=True)
    return make_df

def comb_make_2Dshape(df="", column_name="", new_name=""):

    df_2d = np.array(
        list(df[column_name].apply(lambda x: x.split() if len(str(x)) == 1326 else [0] * 1326))
    ).astype(float)

    df_2d = df_2d.reshape(df_2d.shape[0], 1, 34, 39)
    #make_df = pd.DataFrame(df_2d, columns=new_name)

    return df_2d


def pio_transform_flop_df(df_y=''):
    # 事前にpoker_func: add_column_board(dir)で作成したcsvを読み込む
    trans_df_y = pd.DataFrame()
    se = pd.Series()

    # y_rangeを分解し各コンボ列を作成
    for row in df_y:
        for k, v in zip(pio_card.keys(), row.split()):
            se[k] = round(float(v), 3)
        trans_df_y = trans_df_y.append(se, ignore_index=True)
    #trans_df_y.drop([colum_name], axis=1, inplace=True)

    return trans_df_y

def pio_flop_pred_make_model(df_x="", df_y=""):
    # train, testを作成
    X_train, X_test, Y_train, Y_test = train_test_split(df_x, df_y, test_size=0.4)

    # oop_rangeを分解し各コンボ列を作成  5400row time 0.8s
    oopRange_df_xtrain = comb_make_2Dshape(X_train, "oop_range", "oop_2d")
    ipRange_df_xtrain = comb_make_2Dshape(X_train, "ip_range", "ip_2d")
    X_train.drop(['oop_range', 'ip_range', "eff_stack"], axis=1, inplace=True)

    oopRange_df_xtest = comb_make_2Dshape(X_test, "oop_range", "oop_2d")
    ipRange_df_xtest = comb_make_2Dshape(X_test, "ip_range", "ip_2d")
    X_test.drop(['oop_range', 'ip_range', "eff_stack"], axis=1, inplace=True)

    # MinMaxScaler
    #X_train, X_test = preprocess_Scaler(X_train, X_test)


    # old make_model
    #model_keras = make_nn_model(len(df_x.columns))

    #new make model
    model_keras = make_nn_model(12)

    history = model_keras.fit([X_train, oopRange_df_xtrain, ipRange_df_xtrain], Y_train.values, epochs=1000, batch_size=64,
                        validation_split=0.4, callbacks = [EarlyStopping()]) # , callbacks = [EarlyStopping()]
    score = model_keras.evaluate([X_test, oopRange_df_xtest, ipRange_df_xtest], Y_test.values, verbose=0)
    print('Test loss:', score[0])
    print('Test accuracy:', score[1])
    y_pred = model_keras.predict([X_test, oopRange_df_xtest, ipRange_df_xtest])
    rms = (np.mean((Y_test.values - y_pred) ** 2)) ** 0.5
    # s = np.std(y_test - y_pred)
    print("Neural Network RMS", rms)


    # 学習履歴をプロット
    #plot_history(history)

    # xgboost_modelを出力
    return model_keras

def preprocess_Scaler(df_train="", df_test=""):
    mm_scaler = StandardScaler()
    if len(df_train) != 0:
        df_train = mm_scaler.fit_transform(df_train)
    if len(df_test) != 0:
        df_test = mm_scaler.fit_transform(df_test)
    return df_train, df_test

def make_nn_model(df_colmunlen):

   df_input = Input(shape=(df_colmunlen,))
   oop_input = Input(shape=(1,34,39)) # channels_first
   ip_input = Input(shape=(1,34,39))  # channels_first

   # df dense
   df_dense = Dense(df_colmunlen, activation='relu',kernel_regularizer=regularizers.l2(0.001))(df_input)
   df_dense = BatchNormalization()(df_dense)
   df_dense = Dense(8, activation='relu',kernel_regularizer=regularizers.l2(0.001))(df_dense)
   """
   df_dense = BatchNormalization()(df_dense)
   df_dense = Dense(4, activation='relu')(df_dense)
   df_dense = BatchNormalization()(df_dense)
   df_dense = Dense(2, activation='relu')(df_dense)
   df_dense = BatchNormalization()(df_dense)
   """
   df_dense = Dense(1, activation='relu')(df_dense)

   # df_dense multi oop, ip
   all_oop = Multiply()([df_dense, oop_input])

   # oop_conv
   oop_conv = Conv2D(32, (3, 3), padding="same", data_format="channels_first",
                     kernel_initializer='he_normal', activation='relu',kernel_regularizer=regularizers.l2(0.001))(all_oop)
   oop_conv = BatchNormalization()(oop_conv)
   oop_conv = MaxPooling2D(pool_size=(2, 2))(oop_conv)
   oop_conv = Dropout(0.25)(oop_conv)
   """
   oop_conv = Conv2D(64, (3, 3), padding="same", data_format="channels_first", kernel_initializer='he_normal',
                     activation='relu')(oop_conv)
   oop_conv = BatchNormalization()(oop_conv)
   oop_conv = MaxPooling2D(pool_size=(2, 2))(oop_conv)
   oop_conv = Dropout(0.25)(oop_conv)
   
   
   oop_conv = Conv2D(128, (3, 3), padding="same", data_format="channels_first", kernel_initializer='he_normal',
                     activation='relu')(oop_conv)
   oop_conv = BatchNormalization()(oop_conv)
   oop_conv = MaxPooling2D(pool_size=(2, 2))(oop_conv)
   oop_conv = Dropout(0.25)(oop_conv)
   """
   oop_conv = Flatten()(oop_conv)
   """
   oop_conv = Dense(512, activation='relu')(oop_conv)
   oop_conv = BatchNormalization()(oop_conv)
   oop_conv = Dropout(0.25)(oop_conv)
   oop_conv = Dense(1, activation='relu')(oop_conv)
   """

   # df_dense multi oop, ip
   all_ip = Multiply()([df_dense, ip_input])
   # ip_conv
   ip_conv = Conv2D(32, (3, 3), padding="same", data_format="channels_first", kernel_initializer='he_normal',
                     activation='relu',kernel_regularizer=regularizers.l2(0.001))(all_ip)
   ip_conv = BatchNormalization()(ip_conv)
   ip_conv = MaxPooling2D(pool_size=(2, 2))(ip_conv)
   ip_conv = Dropout(0.25)(ip_conv)
   """
   ip_conv = Conv2D(64, (3, 3), padding="same", data_format="channels_first", kernel_initializer='he_normal',
                     activation='relu')(ip_conv)
   ip_conv = BatchNormalization()(ip_conv)
   ip_conv = MaxPooling2D(pool_size=(2, 2))(ip_conv)
   ip_conv = Dropout(0.25)(ip_conv)

   ip_conv = Conv2D(128, (3, 3), padding="same", data_format="channels_first", kernel_initializer='he_normal',
                     activation='relu')(ip_conv)
   ip_conv = BatchNormalization()(ip_conv)
   ip_conv = MaxPooling2D(pool_size=(2, 2))(ip_conv)
   ip_conv = Dropout(0.25)(ip_conv)
   """
   ip_conv = Flatten()(ip_conv)
   """
   ip_conv = Dense(512, activation='relu')(ip_conv)
   ip_conv = BatchNormalization()(ip_conv)
   ip_conv = Dropout(0.25)(ip_conv)
   ip_conv = Dense(1, activation='relu')(ip_conv)
   """

   # oop, ip add
   all_range = Multiply()([oop_conv, ip_conv])
   #all_range = Multiply()([df_dense, all_range])

   # output
   output_range = Dense(2652, activation='relu',kernel_regularizer=regularizers.l2(0.001))(all_range)
   output_range = BatchNormalization()(output_range)
   output_range = Dropout(0.25)(output_range)
   output_range = Dense(1326, activation='softmax')(output_range)

   model = Model(inputs=[df_input, oop_input, ip_input], outputs=output_range)
   opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)
   model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])  # mean_squared_error  categorical_crossentropy

   return model

def plot_history(history):
    # print(history.history.keys())

    # 精度の履歴をプロット
    plt.plot(history.history['acc'])
    plt.plot(history.history['val_acc'])
    plt.title('model acc')
    plt.xlabel('epoch')
    plt.ylabel('acc')
    plt.legend(['acc', 'val_acc'], loc='lower right')
    plt.show()

    # 損失の履歴をプロット
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('model loss')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.legend(['loss', 'val_loss'], loc='lower right')
    plt.show()



# main
def main(one_flop=True, input_df=""):
    start = time.time()

    if one_flop:

        # 単体flopの時 model作成済み
        # model load
        model = load_model(".\\nn_bet_70_range.h5")

        # oop_rangeを分解し各コンボ列を作成
        oopRange_df = comb_make_2Dshape(input_df, "oop_range", "oop_")
        # ip_rangeを分解し各コンボ列を作成
        ipRange_df = comb_make_2Dshape(input_df, "ip_range", "ip_")
        # column drop
        input_df.drop(['oop_range', 'ip_range', "eff_stack"], axis=1, inplace=True)
        # 単体flop用   int型で出力 deepLearningの入力値にする
        input_df, df_null = preprocess_Scaler(input_df)
        # prediction
        predictions = model.predict([input_df, oopRange_df, ipRange_df])
        output_df = pd.DataFrame(predictions.T, index=pio_card.keys())
        output_df.to_csv(r'C:\Users\tatuki\Desktop\output_pio_ml_csv\practis.csv')
        print(predictions)

    else:
        # model未作成の時、実行 csvファイルの時
        df = pd.read_csv(r'C:\Users\tatuki\Desktop\pio_ML_csvfile\UTGvsIPcall_r_0_OOP_action.csv')
        df_x = df.iloc[:, 1:16]     # モデル作成時、共通df
        df_y = df.iloc[:, 16:]      # モデル作成時、カラムを指定する

        # oop_rangeを分解し各コンボ列を作成  5400row time 0.8s
        # oopRange_df = comb_make_colum(df_x, "oop_range", "oop_")
        #oopRange_df = comb_make_2Dshape(df_x, "oop_range", "oop_2d")

        # ip_rangeを分解し各コンボ列を作成
        #ipRange_df = comb_make_colum(df_x, "ip_range", "ip_")
        #ipRange_df = comb_make_2Dshape(df_x, "ip_range", "ip_2d")

        # column drop
        #df_x.drop(['oop_range', 'ip_range',"eff_stack"], axis=1, inplace=True)
        #df_x = pd.concat([df_x, oopRange_df.round(3), ipRange_df.round(3)], axis=1)

        # label_column raise_3x_range transform
        df_bet_70_range = comb_make_colum(df_y.round(3), "bet_70_range",)
        # モデルが作成されていない場合
        nn_bet_70_range = pio_flop_pred_make_model(df_x, df_bet_70_range)
        # model save
        nn_bet_70_range.save(".\\nn_bet_70_range.h5")

    elapsed_time = time.time() - start
    print("elapsed_time:{0}".format(elapsed_time) + "[sec]")


if __name__ == '__main__':

    input_df = pd.DataFrame()
    input_Series = pd.Series()

    input_Series["flop"] = "2s2d2c"
    input_Series['int_num1'] = RANK_NUM[input_Series["flop"][0]]
    input_Series['int_num2'] = RANK_NUM[input_Series["flop"][2]]
    input_Series['int_num3'] = RANK_NUM[input_Series["flop"][4]]
    input_Series['suit1'] = SUIT_NUM[input_Series["flop"][1]]
    input_Series['suit2'] = SUIT_NUM[input_Series["flop"][3]]
    input_Series['suit3'] = SUIT_NUM[input_Series["flop"][5]]

    input_Series["oop_range"] = "0.25 0.25 0.25 0.25 0.25 0.25 0 0 0 0 0 0 0 0 0.25 0 0 0 0 0.25 0.25 0 0 0 0 0.25 0.25 0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 0 0 0 0 0 0.75 0.75 0 0 0 0 0 0 0 0 0.75 0.75 0.75 0 0 0 0 0 0 0 0 0.100000001 0 0 0 0 0 0 0 0 0 0 0 0 0.100000001 0 0 1 0 0 0 0 0 0 0 0 0 0 0.100000001 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0.100000001 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0.200000003 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.200000003 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.200000003 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.200000003 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.200000003 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.200000003 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.200000003 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.200000003 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.100000001 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.100000001 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.100000001 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.100000001 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 0.75 0.75 0.75 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0.75 1 0.75 0.75 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0.75 0.75 1 0.75 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0.75 0.75 0.75 1 1 1 1 1 1 1 1 0.25 0 0 0 0.5 0 0 0 0.5 0 0 0 0.5 0 0 0 0.25 0 0 0 0.25 0 0 0 0.25 0 0 0 0.5 0 0 0 1 0.75 0.75 0.75 1 1 1 1 1 1 1 1 1 1 1 1 0 0.25 0 0 0 0.5 0 0 0 0.5 0 0 0 0.5 0 0 0 0.25 0 0 0 0.25 0 0 0 0.25 0 0 0 0.5 0 0 0.75 1 0.75 0.75 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0.25 0 0 0 0.5 0 0 0 0.5 0 0 0 0.5 0 0 0 0.25 0 0 0 0.25 0 0 0 0.25 0 0 0 0.5 0 0.75 0.75 1 0.75 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0.25 0 0 0 0.5 0 0 0 0.5 0 0 0 0.5 0 0 0 0.25 0 0 0 0.25 0 0 0 0.25 0 0 0 0.5 0.75 0.75 0.75 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    input_Series["ip_range"] = "0.5 0.5 0.5 0.5 0.5 0.5 0 0 0 0 0 0 0 0 0.7 0 0 0 0 0.7 0.7 0 0 0 0 0.7 0.7 0.7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.6 0 0 0 0 0 0 0 0 0.6 0.6 0 0 0 0 0 0 0 0 0.6 0.6 0.6 0 0 0 0 0.1 0 0 0 0.6 0 0 0 0 0 0 0 0 0.1 0 0 0 0.6 0 0 0.7 0 0 0 0 0 0 0.1 0 0 0 0.6 0 0.7 0.7 0 0 0 0 0 0 0 0.1 0 0 0 0.6 0.7 0.7 0.7 0 0 0 0 0 0 0 0 0 0 0 0 0.6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.6 0 0 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.6 0 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.6 0.9 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.7 0 0 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.7 0 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.7 0.9 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.6 0 0 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.6 0 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.6 0.9 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.5 0 0 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.5 0 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.5 0.9 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0 0 0 0.7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0 0 0 0.7 0 0 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0 0 0 0.7 0 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0 0 0 0.7 0.9 0.9 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 0.9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 0.9 0 0 0.8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 0.9 0 0.8 0.8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 0.9 0.8 0.8 0.8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.7 0 0 0 0.6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.7 0 0 0 0.6 0 0 0.1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.7 0 0 0 0.6 0 0.1 0.1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.7 0 0 0 0.6 0.1 0.1 0.1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.1 0 0 0 0.1 0 0 0 0.3 0 0 0 0.6 0 0 0 0.8 0 0 0 0.7 0.3 0.3 0.3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.1 0 0 0 0.1 0 0 0 0.3 0 0 0 0.6 0 0 0 0.8 0 0 0.3 0.7 0.3 0.3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.1 0 0 0 0.1 0 0 0 0.3 0 0 0 0.6 0 0 0 0.8 0 0.3 0.3 0.7 0.3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0 0 0 0.1 0 0 0 0.1 0 0 0 0.3 0 0 0 0.6 0 0 0 0.8 0.3 0.3 0.3 0.7 0 0 0 0.1 0 0 0 0.4 0 0 0 0.3 0 0 0 0.4 0 0 0 0.1 0 0 0 0.2 0 0 0 0.2 0 0 0 0.5 0 0 0 0.8 0 0 0 0.9 0.2 0.2 0.2 0.7 0.6 0.6 0.6 0 0.2 0.2 0.2 0 0.1 0 0 0 0.4 0 0 0 0.3 0 0 0 0.4 0 0 0 0.1 0 0 0 0.2 0 0 0 0.2 0 0 0 0.5 0 0 0 0.8 0 0 0.2 0.9 0.2 0.2 0.6 0.7 0.6 0.6 0.2 0 0.2 0.2 0 0 0 0.1 0 0 0 0.4 0 0 0 0.3 0 0 0 0.4 0 0 0 0.1 0 0 0 0.2 0 0 0 0.2 0 0 0 0.5 0 0 0 0.8 0 0.2 0.2 0.9 0.2 0.6 0.6 0.7 0.6 0.2 0.2 0 0.2 0 0 0 0 0 0.1 0 0 0 0.4 0 0 0 0.3 0 0 0 0.4 0 0 0 0.1 0 0 0 0.2 0 0 0 0.2 0 0 0 0.5 0 0 0 0.8 0.2 0.2 0.2 0.9 0.6 0.6 0.6 0.7 0.2 0.2 0.2 0 0 0 0"
    input_Series["current_pot"] = 75
    input_Series["eff_stack"] = 970  # starting_stack
    input_Series["oop_stack"] = 918
    input_Series["ip_stack"] = 970
    input_Series["action_order"] = position["OOP"]  # OOP:0 or IP:1
    input_Series["villain_action"] = villain_action["first_action"] # 後でone_hotに変換 [0]:check, [1]:call, [2]:bet, [3]:3bet(raise), [4]:4bet, [5]:5bet , [9]:first_action(oop時のアクション)
    input_Series["villain_amount"] = 0  # bet amount($)

    input_df = input_df.append(input_Series, ignore_index=True)

    # カラム 順序整理
    input_df.drop(["flop"], axis=1, inplace=True)
    input_df = input_df[["int_num1", "int_num2", "int_num3", "suit1", "suit2", "suit3", "current_pot", "eff_stack", "oop_range",
             "oop_stack", "ip_range", "ip_stack", "action_order", "villain_action", "villain_amount"]]

    """
    # oop_rangeを分解し各コンボ列を作成
    oopRange_df = comb_make_colum(input_df, "oop_range", "oop_")
    # ip_rangeを分解し各コンボ列を作成
    ipRange_df = comb_make_colum(input_df, "ip_range", "ip_")
    # column drop
    input_df.drop(['oop_range', 'ip_range',"eff_stack"], axis=1, inplace=True)
    input_df = pd.concat([input_df, oopRange_df.round(3), ipRange_df.round(3)], axis=1)
    """
    main(one_flop=False, input_df=input_df)
